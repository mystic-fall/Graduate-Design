// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dormitoryService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DormitoryServiceClient is the client API for DormitoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DormitoryServiceClient interface {
	GetDormitoryList(ctx context.Context, in *GetDormitoryListRequest, opts ...grpc.CallOption) (*GetDormitoryListResponse, error)
	CreateDormitory(ctx context.Context, in *CreateDormitoryRequest, opts ...grpc.CallOption) (*CreateDormitoryResponse, error)
	UpdateDormitory(ctx context.Context, in *UpdateDormitoryRequest, opts ...grpc.CallOption) (*UpdateDormitoryResponse, error)
	DeleteDormitory(ctx context.Context, in *DeleteDormitoryRequest, opts ...grpc.CallOption) (*DeleteDormitoryResponse, error)
	GetBuildingList(ctx context.Context, in *GetBuildingListRequest, opts ...grpc.CallOption) (*GetBuildingListResponse, error)
	CreateBuilding(ctx context.Context, in *CreateBuildingRequest, opts ...grpc.CallOption) (*CreateBuildingResponse, error)
	UpdateBuilding(ctx context.Context, in *UpdateBuildingRequest, opts ...grpc.CallOption) (*UpdateBuildingResponse, error)
	DeleteBuilding(ctx context.Context, in *DeleteBuildingRequest, opts ...grpc.CallOption) (*DeleteBuildingResponse, error)
	GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error)
	CreateLive(ctx context.Context, in *CreateLiveRequest, opts ...grpc.CallOption) (*CreateLiveResponse, error)
	UpdateLive(ctx context.Context, in *UpdateLiveRequest, opts ...grpc.CallOption) (*UpdateLiveResponse, error)
	DeleteLive(ctx context.Context, in *DeleteLiveRequest, opts ...grpc.CallOption) (*DeleteLiveResponse, error)
}

type dormitoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDormitoryServiceClient(cc grpc.ClientConnInterface) DormitoryServiceClient {
	return &dormitoryServiceClient{cc}
}

func (c *dormitoryServiceClient) GetDormitoryList(ctx context.Context, in *GetDormitoryListRequest, opts ...grpc.CallOption) (*GetDormitoryListResponse, error) {
	out := new(GetDormitoryListResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/GetDormitoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) CreateDormitory(ctx context.Context, in *CreateDormitoryRequest, opts ...grpc.CallOption) (*CreateDormitoryResponse, error) {
	out := new(CreateDormitoryResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/CreateDormitory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) UpdateDormitory(ctx context.Context, in *UpdateDormitoryRequest, opts ...grpc.CallOption) (*UpdateDormitoryResponse, error) {
	out := new(UpdateDormitoryResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/UpdateDormitory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) DeleteDormitory(ctx context.Context, in *DeleteDormitoryRequest, opts ...grpc.CallOption) (*DeleteDormitoryResponse, error) {
	out := new(DeleteDormitoryResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/DeleteDormitory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) GetBuildingList(ctx context.Context, in *GetBuildingListRequest, opts ...grpc.CallOption) (*GetBuildingListResponse, error) {
	out := new(GetBuildingListResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/GetBuildingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) CreateBuilding(ctx context.Context, in *CreateBuildingRequest, opts ...grpc.CallOption) (*CreateBuildingResponse, error) {
	out := new(CreateBuildingResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/CreateBuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) UpdateBuilding(ctx context.Context, in *UpdateBuildingRequest, opts ...grpc.CallOption) (*UpdateBuildingResponse, error) {
	out := new(UpdateBuildingResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/UpdateBuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) DeleteBuilding(ctx context.Context, in *DeleteBuildingRequest, opts ...grpc.CallOption) (*DeleteBuildingResponse, error) {
	out := new(DeleteBuildingResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/DeleteBuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error) {
	out := new(GetLiveListResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/GetLiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) CreateLive(ctx context.Context, in *CreateLiveRequest, opts ...grpc.CallOption) (*CreateLiveResponse, error) {
	out := new(CreateLiveResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/CreateLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) UpdateLive(ctx context.Context, in *UpdateLiveRequest, opts ...grpc.CallOption) (*UpdateLiveResponse, error) {
	out := new(UpdateLiveResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/UpdateLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dormitoryServiceClient) DeleteLive(ctx context.Context, in *DeleteLiveRequest, opts ...grpc.CallOption) (*DeleteLiveResponse, error) {
	out := new(DeleteLiveResponse)
	err := c.cc.Invoke(ctx, "/pb.DormitoryService/DeleteLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DormitoryServiceServer is the server API for DormitoryService service.
// All implementations must embed UnimplementedDormitoryServiceServer
// for forward compatibility
type DormitoryServiceServer interface {
	GetDormitoryList(context.Context, *GetDormitoryListRequest) (*GetDormitoryListResponse, error)
	CreateDormitory(context.Context, *CreateDormitoryRequest) (*CreateDormitoryResponse, error)
	UpdateDormitory(context.Context, *UpdateDormitoryRequest) (*UpdateDormitoryResponse, error)
	DeleteDormitory(context.Context, *DeleteDormitoryRequest) (*DeleteDormitoryResponse, error)
	GetBuildingList(context.Context, *GetBuildingListRequest) (*GetBuildingListResponse, error)
	CreateBuilding(context.Context, *CreateBuildingRequest) (*CreateBuildingResponse, error)
	UpdateBuilding(context.Context, *UpdateBuildingRequest) (*UpdateBuildingResponse, error)
	DeleteBuilding(context.Context, *DeleteBuildingRequest) (*DeleteBuildingResponse, error)
	GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error)
	CreateLive(context.Context, *CreateLiveRequest) (*CreateLiveResponse, error)
	UpdateLive(context.Context, *UpdateLiveRequest) (*UpdateLiveResponse, error)
	DeleteLive(context.Context, *DeleteLiveRequest) (*DeleteLiveResponse, error)
	mustEmbedUnimplementedDormitoryServiceServer()
}

// UnimplementedDormitoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDormitoryServiceServer struct {
}

func (UnimplementedDormitoryServiceServer) GetDormitoryList(context.Context, *GetDormitoryListRequest) (*GetDormitoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDormitoryList not implemented")
}
func (UnimplementedDormitoryServiceServer) CreateDormitory(context.Context, *CreateDormitoryRequest) (*CreateDormitoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDormitory not implemented")
}
func (UnimplementedDormitoryServiceServer) UpdateDormitory(context.Context, *UpdateDormitoryRequest) (*UpdateDormitoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDormitory not implemented")
}
func (UnimplementedDormitoryServiceServer) DeleteDormitory(context.Context, *DeleteDormitoryRequest) (*DeleteDormitoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDormitory not implemented")
}
func (UnimplementedDormitoryServiceServer) GetBuildingList(context.Context, *GetBuildingListRequest) (*GetBuildingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildingList not implemented")
}
func (UnimplementedDormitoryServiceServer) CreateBuilding(context.Context, *CreateBuildingRequest) (*CreateBuildingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuilding not implemented")
}
func (UnimplementedDormitoryServiceServer) UpdateBuilding(context.Context, *UpdateBuildingRequest) (*UpdateBuildingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuilding not implemented")
}
func (UnimplementedDormitoryServiceServer) DeleteBuilding(context.Context, *DeleteBuildingRequest) (*DeleteBuildingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuilding not implemented")
}
func (UnimplementedDormitoryServiceServer) GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveList not implemented")
}
func (UnimplementedDormitoryServiceServer) CreateLive(context.Context, *CreateLiveRequest) (*CreateLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLive not implemented")
}
func (UnimplementedDormitoryServiceServer) UpdateLive(context.Context, *UpdateLiveRequest) (*UpdateLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLive not implemented")
}
func (UnimplementedDormitoryServiceServer) DeleteLive(context.Context, *DeleteLiveRequest) (*DeleteLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLive not implemented")
}
func (UnimplementedDormitoryServiceServer) mustEmbedUnimplementedDormitoryServiceServer() {}

// UnsafeDormitoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DormitoryServiceServer will
// result in compilation errors.
type UnsafeDormitoryServiceServer interface {
	mustEmbedUnimplementedDormitoryServiceServer()
}

func RegisterDormitoryServiceServer(s grpc.ServiceRegistrar, srv DormitoryServiceServer) {
	s.RegisterService(&DormitoryService_ServiceDesc, srv)
}

func _DormitoryService_GetDormitoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDormitoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).GetDormitoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/GetDormitoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).GetDormitoryList(ctx, req.(*GetDormitoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_CreateDormitory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDormitoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).CreateDormitory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/CreateDormitory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).CreateDormitory(ctx, req.(*CreateDormitoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_UpdateDormitory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDormitoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).UpdateDormitory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/UpdateDormitory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).UpdateDormitory(ctx, req.(*UpdateDormitoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_DeleteDormitory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDormitoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).DeleteDormitory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/DeleteDormitory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).DeleteDormitory(ctx, req.(*DeleteDormitoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_GetBuildingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).GetBuildingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/GetBuildingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).GetBuildingList(ctx, req.(*GetBuildingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_CreateBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).CreateBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/CreateBuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).CreateBuilding(ctx, req.(*CreateBuildingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_UpdateBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).UpdateBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/UpdateBuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).UpdateBuilding(ctx, req.(*UpdateBuildingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_DeleteBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuildingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).DeleteBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/DeleteBuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).DeleteBuilding(ctx, req.(*DeleteBuildingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_GetLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).GetLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/GetLiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).GetLiveList(ctx, req.(*GetLiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_CreateLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).CreateLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/CreateLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).CreateLive(ctx, req.(*CreateLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_UpdateLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).UpdateLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/UpdateLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).UpdateLive(ctx, req.(*UpdateLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DormitoryService_DeleteLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DormitoryServiceServer).DeleteLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DormitoryService/DeleteLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DormitoryServiceServer).DeleteLive(ctx, req.(*DeleteLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DormitoryService_ServiceDesc is the grpc.ServiceDesc for DormitoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DormitoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DormitoryService",
	HandlerType: (*DormitoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDormitoryList",
			Handler:    _DormitoryService_GetDormitoryList_Handler,
		},
		{
			MethodName: "CreateDormitory",
			Handler:    _DormitoryService_CreateDormitory_Handler,
		},
		{
			MethodName: "UpdateDormitory",
			Handler:    _DormitoryService_UpdateDormitory_Handler,
		},
		{
			MethodName: "DeleteDormitory",
			Handler:    _DormitoryService_DeleteDormitory_Handler,
		},
		{
			MethodName: "GetBuildingList",
			Handler:    _DormitoryService_GetBuildingList_Handler,
		},
		{
			MethodName: "CreateBuilding",
			Handler:    _DormitoryService_CreateBuilding_Handler,
		},
		{
			MethodName: "UpdateBuilding",
			Handler:    _DormitoryService_UpdateBuilding_Handler,
		},
		{
			MethodName: "DeleteBuilding",
			Handler:    _DormitoryService_DeleteBuilding_Handler,
		},
		{
			MethodName: "GetLiveList",
			Handler:    _DormitoryService_GetLiveList_Handler,
		},
		{
			MethodName: "CreateLive",
			Handler:    _DormitoryService_CreateLive_Handler,
		},
		{
			MethodName: "UpdateLive",
			Handler:    _DormitoryService_UpdateLive_Handler,
		},
		{
			MethodName: "DeleteLive",
			Handler:    _DormitoryService_DeleteLive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dormitoryService.proto",
}
