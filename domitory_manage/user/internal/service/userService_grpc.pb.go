// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dormitoryService.proto

package service

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetStuList(ctx context.Context, in *GetStuListRequest, opts ...grpc.CallOption) (*GetStuListResponse, error)
	CreateStu(ctx context.Context, in *CreateStuRequest, opts ...grpc.CallOption) (*CreateStuResponse, error)
	UpdateStu(ctx context.Context, in *UpdateStuRequest, opts ...grpc.CallOption) (*UpdateStuResponse, error)
	DeleteStu(ctx context.Context, in *DeleteStuRequest, opts ...grpc.CallOption) (*DeleteStuResponse, error)
	GetAdminList(ctx context.Context, in *GetAdminListRequest, opts ...grpc.CallOption) (*GetAdminListResponse, error)
	CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*CreateAdminResponse, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*UpdateAdminResponse, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*DeleteAdminResponse, error)
	GetDMList(ctx context.Context, in *GetDMListRequest, opts ...grpc.CallOption) (*GetDMListResponse, error)
	CreateDM(ctx context.Context, in *CreateDMRequest, opts ...grpc.CallOption) (*CreateDMResponse, error)
	UpdateDM(ctx context.Context, in *UpdateDMRequest, opts ...grpc.CallOption) (*UpdateDMResponse, error)
	DeleteDM(ctx context.Context, in *DeleteDMRequest, opts ...grpc.CallOption) (*DeleteDMResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStuList(ctx context.Context, in *GetStuListRequest, opts ...grpc.CallOption) (*GetStuListResponse, error) {
	out := new(GetStuListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/GetStuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateStu(ctx context.Context, in *CreateStuRequest, opts ...grpc.CallOption) (*CreateStuResponse, error) {
	out := new(CreateStuResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/CreateStu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStu(ctx context.Context, in *UpdateStuRequest, opts ...grpc.CallOption) (*UpdateStuResponse, error) {
	out := new(UpdateStuResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/UpdateStu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteStu(ctx context.Context, in *DeleteStuRequest, opts ...grpc.CallOption) (*DeleteStuResponse, error) {
	out := new(DeleteStuResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/DeleteStu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAdminList(ctx context.Context, in *GetAdminListRequest, opts ...grpc.CallOption) (*GetAdminListResponse, error) {
	out := new(GetAdminListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/GetAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*CreateAdminResponse, error) {
	out := new(CreateAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*UpdateAdminResponse, error) {
	out := new(UpdateAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/UpdateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*DeleteAdminResponse, error) {
	out := new(DeleteAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDMList(ctx context.Context, in *GetDMListRequest, opts ...grpc.CallOption) (*GetDMListResponse, error) {
	out := new(GetDMListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/GetDMList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateDM(ctx context.Context, in *CreateDMRequest, opts ...grpc.CallOption) (*CreateDMResponse, error) {
	out := new(CreateDMResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/CreateDM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateDM(ctx context.Context, in *UpdateDMRequest, opts ...grpc.CallOption) (*UpdateDMResponse, error) {
	out := new(UpdateDMResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/UpdateDM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteDM(ctx context.Context, in *DeleteDMRequest, opts ...grpc.CallOption) (*DeleteDMResponse, error) {
	out := new(DeleteDMResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/DeleteDM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	GetStuList(context.Context, *GetStuListRequest) (*GetStuListResponse, error)
	CreateStu(context.Context, *CreateStuRequest) (*CreateStuResponse, error)
	UpdateStu(context.Context, *UpdateStuRequest) (*UpdateStuResponse, error)
	DeleteStu(context.Context, *DeleteStuRequest) (*DeleteStuResponse, error)
	GetAdminList(context.Context, *GetAdminListRequest) (*GetAdminListResponse, error)
	CreateAdmin(context.Context, *CreateAdminRequest) (*CreateAdminResponse, error)
	UpdateAdmin(context.Context, *UpdateAdminRequest) (*UpdateAdminResponse, error)
	DeleteAdmin(context.Context, *DeleteAdminRequest) (*DeleteAdminResponse, error)
	GetDMList(context.Context, *GetDMListRequest) (*GetDMListResponse, error)
	CreateDM(context.Context, *CreateDMRequest) (*CreateDMResponse, error)
	UpdateDM(context.Context, *UpdateDMRequest) (*UpdateDMResponse, error)
	DeleteDM(context.Context, *DeleteDMRequest) (*DeleteDMResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) GetStuList(context.Context, *GetStuListRequest) (*GetStuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStuList not implemented")
}
func (UnimplementedUserServiceServer) CreateStu(context.Context, *CreateStuRequest) (*CreateStuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStu not implemented")
}
func (UnimplementedUserServiceServer) UpdateStu(context.Context, *UpdateStuRequest) (*UpdateStuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStu not implemented")
}
func (UnimplementedUserServiceServer) DeleteStu(context.Context, *DeleteStuRequest) (*DeleteStuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStu not implemented")
}
func (UnimplementedUserServiceServer) GetAdminList(context.Context, *GetAdminListRequest) (*GetAdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminList not implemented")
}
func (UnimplementedUserServiceServer) CreateAdmin(context.Context, *CreateAdminRequest) (*CreateAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedUserServiceServer) UpdateAdmin(context.Context, *UpdateAdminRequest) (*UpdateAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedUserServiceServer) DeleteAdmin(context.Context, *DeleteAdminRequest) (*DeleteAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedUserServiceServer) GetDMList(context.Context, *GetDMListRequest) (*GetDMListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDMList not implemented")
}
func (UnimplementedUserServiceServer) CreateDM(context.Context, *CreateDMRequest) (*CreateDMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDM not implemented")
}
func (UnimplementedUserServiceServer) UpdateDM(context.Context, *UpdateDMRequest) (*UpdateDMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDM not implemented")
}
func (UnimplementedUserServiceServer) DeleteDM(context.Context, *DeleteDMRequest) (*DeleteDMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDM not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/GetStuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStuList(ctx, req.(*GetStuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateStu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateStu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/CreateStu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateStu(ctx, req.(*CreateStuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UpdateStu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStu(ctx, req.(*UpdateStuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteStu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteStu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/DeleteStu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteStu(ctx, req.(*DeleteStuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/GetAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAdminList(ctx, req.(*GetAdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAdmin(ctx, req.(*CreateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateAdmin(ctx, req.(*UpdateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAdmin(ctx, req.(*DeleteAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDMList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDMListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDMList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/GetDMList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDMList(ctx, req.(*GetDMListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateDM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateDM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/CreateDM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateDM(ctx, req.(*CreateDMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateDM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateDM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UpdateDM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateDM(ctx, req.(*UpdateDMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteDM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteDM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/DeleteDM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteDM(ctx, req.(*DeleteDMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "GetStuList",
			Handler:    _UserService_GetStuList_Handler,
		},
		{
			MethodName: "CreateStu",
			Handler:    _UserService_CreateStu_Handler,
		},
		{
			MethodName: "UpdateStu",
			Handler:    _UserService_UpdateStu_Handler,
		},
		{
			MethodName: "DeleteStu",
			Handler:    _UserService_DeleteStu_Handler,
		},
		{
			MethodName: "GetAdminList",
			Handler:    _UserService_GetAdminList_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _UserService_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _UserService_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _UserService_DeleteAdmin_Handler,
		},
		{
			MethodName: "GetDMList",
			Handler:    _UserService_GetDMList_Handler,
		},
		{
			MethodName: "CreateDM",
			Handler:    _UserService_CreateDM_Handler,
		},
		{
			MethodName: "UpdateDM",
			Handler:    _UserService_UpdateDM_Handler,
		},
		{
			MethodName: "DeleteDM",
			Handler:    _UserService_DeleteDM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dormitoryService.proto",
}
